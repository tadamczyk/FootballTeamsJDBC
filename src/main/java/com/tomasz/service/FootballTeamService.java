package com.tomasz.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.tomasz.domain.FootballTeam;

public class FootballTeamService implements IFootballTeamService {
  private Connection connection;
  private String url = "jdbc:hsqldb:hsql://localhost/workdb";
  private String createTableFootballTeam = "CREATE TABLE FootballTeam(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(50), yoe integer, value real)";
  private PreparedStatement addFootballTeamStmt;
  private PreparedStatement removeAllFootballTeamsStmt;
  private PreparedStatement getAllFootballTeamsStmt;
  private Statement statement;

  public FootballTeamService() {
    try {
      connection = DriverManager.getConnection(url);
      statement = connection.createStatement();
      ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
      boolean tableExists = false;
      while (rs.next()) {
        if ("FootballTeam".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
          tableExists = true;
          break;
        }
      }
      if (!tableExists)
        statement.executeUpdate(createTableFootballTeam);
      addFootballTeamStmt = connection.prepareStatement("INSERT INTO FootballTeam(name, yoe, value) VALUES(?, ?, ?)");
      removeAllFootballTeamsStmt = connection.prepareStatement("DELETE FROM FootballTeam");
      getAllFootballTeamsStmt = connection.prepareStatement("SELECT id, name, yoe, value FROM FootballTeam");
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  Connection getConnection() {
    return connection;
  }

  @Override
  public int addFootballTeam(FootballTeam footballTeam) {
    int count = 0;
    try {
      addFootballTeamStmt.setString(1, footballTeam.getName());
      addFootballTeamStmt.setInt(2, footballTeam.getYearOfEstablished());
      addFootballTeamStmt.setDouble(3, footballTeam.getMarketValue());
      count = addFootballTeamStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return count;
  }

  @Override
  public void removeAllFootballTeams() {
    try {
      removeAllFootballTeamsStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  @Override
  public List<FootballTeam> getAllFootballTeams() {
    List<FootballTeam> footballTeams = new ArrayList<FootballTeam>();
    try {
      ResultSet rs = getAllFootballTeamsStmt.executeQuery();
      while (rs.next()) {
        FootballTeam ft = new FootballTeam();
        ft.setId(rs.getInt("id"));
        ft.setName(rs.getString("name"));
        ft.setYearOfEstablished(rs.getInt("yoe"));
        ft.setMarketValue(rs.getDouble("value"));
        footballTeams.add(ft);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return footballTeams;
  }
}
