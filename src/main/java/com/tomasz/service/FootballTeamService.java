package com.tomasz.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import com.tomasz.domain.FootballTeam;

public class FootballTeamService implements IFootballTeamService {
  private Connection connection;
  private String url = "jdbc:hsqldb:hsql://localhost/workdb";
  private String createTableFootballTeam = "CREATE TABLE FootballTeam"
      + "(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(50), "
      + "yearOfEstablished integer, marketValue real)";
  private PreparedStatement addFootballTeamStmt;
  private PreparedStatement getAllFootballTeamsStmt;
  private PreparedStatement updateNameFootballTeamStmt;
  private PreparedStatement updateYearOfEstablishedFootballTeamStmt;
  private PreparedStatement updateMarketValueFootballTeamStmt;
  private PreparedStatement removeAllFootballTeamsStmt;
  private PreparedStatement removeFootballTeamByIdStmt;
  private PreparedStatement removeFootballTeamByNameStmt;
  private PreparedStatement findByIdStmt;
  private PreparedStatement findByNameStmt;
  private PreparedStatement findByYearOfEstablishedStmt;
  private PreparedStatement findByMarketValueStmt;
  private Statement statement;

  public FootballTeamService() {
    try {
      connection = DriverManager.getConnection(url);
      statement = connection.createStatement();
      ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
      boolean tableExists = false;
      while (rs.next()) {
        if ("FootballTeam".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
          tableExists = true;
          break;
        }
      }
      if (!tableExists)
        statement.executeUpdate(createTableFootballTeam);
      addFootballTeamStmt = connection
          .prepareStatement("INSERT INTO FootballTeam(name, yearOfEstablished, marketValue) VALUES(?, ?, ?)");
      getAllFootballTeamsStmt = connection
          .prepareStatement("SELECT id, name, yearOfEstablished, marketValue FROM FootballTeam");
      updateNameFootballTeamStmt = connection.prepareStatement("UPDATE FootballTeam SET name = ? WHERE id = ?");
      updateYearOfEstablishedFootballTeamStmt = connection
          .prepareStatement("UPDATE FootballTeam SET yearOfEstablished = ? WHERE id = ?");
      updateMarketValueFootballTeamStmt = connection
          .prepareStatement("UPDATE FootballTeam SET marketValue = ? WHERE id = ?");
      removeAllFootballTeamsStmt = connection.prepareStatement("DELETE FROM FootballTeam");
      removeFootballTeamByIdStmt = connection.prepareStatement("DELETE FROM FootballTeam WHERE id = ?");
      removeFootballTeamByNameStmt = connection.prepareStatement("DELETE FROM FootballTeam WHERE name = ?");
      findByIdStmt = connection
          .prepareStatement("SELECT id, name, yearOfEstablished, marketValue FROM FootballTeam WHERE id = ?");
      findByNameStmt = connection
          .prepareStatement("SELECT id, name, yearOfEstablished, marketValue FROM FootballTeam WHERE name = ?");
      findByYearOfEstablishedStmt = connection.prepareStatement(
          "SELECT id, name, yearOfEstablished, marketValue FROM FootballTeam WHERE yearOfEstablished = ?");
      findByMarketValueStmt = connection
          .prepareStatement("SELECT id, name, yearOfEstablished, marketValue FROM FootballTeam WHERE marketValue = ?");
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  Connection getConnection() {
    return connection;
  }

  @Override
  public int addFootballTeam(FootballTeam footballTeam) {
    int count = 0;
    try {
      addFootballTeamStmt.setString(1, footballTeam.getName());
      addFootballTeamStmt.setInt(2, footballTeam.getYearOfEstablished());
      addFootballTeamStmt.setDouble(3, footballTeam.getMarketValue());
      count = addFootballTeamStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return count;
  }

  @Override
  public List<FootballTeam> getAllFootballTeams() {
    List<FootballTeam> footballTeams = new ArrayList<FootballTeam>();
    try {
      ResultSet rs = getAllFootballTeamsStmt.executeQuery();
      while (rs.next()) {
        FootballTeam ft = new FootballTeam();
        ft.setId(rs.getInt("id"));
        ft.setName(rs.getString("name"));
        ft.setYearOfEstablished(rs.getInt("yearOfEstablished"));
        ft.setMarketValue(rs.getDouble("marketValue"));
        footballTeams.add(ft);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return footballTeams;
  }

  @Override
  public void updateNameFootballTeam(FootballTeam footballTeam, String name) {
    // TODO Auto-generated method stub

  }

  @Override
  public void updateYearOfEstablishedFootballTeam(FootballTeam footballTeam, int yearOfEstablished) {
    // TODO Auto-generated method stub

  }

  @Override
  public void updateMarketValueFootballTeam(FootballTeam footballTeam, double marketValue) {
    // TODO Auto-generated method stub

  }

  @Override
  public void removeAllFootballTeams() {
    try {
      removeAllFootballTeamsStmt.executeUpdate();
    } catch (SQLException e) {
      e.printStackTrace();
    }
  }

  @Override
  public void removeFootballTeamById(long id) {
    // TODO Auto-generated method stub

  }

  @Override
  public void removeFootballTeamByName(String name) {
    // TODO Auto-generated method stub

  }

  @Override
  public FootballTeam findById(long id) {
    FootballTeam ft = null;
    try {
      findByIdStmt.setLong(1, id);
      ResultSet resultSet = findByIdStmt.executeQuery();
      if (resultSet.next()) {
        String name = resultSet.getString("name");
        int yearOfEstablished = resultSet.getInt("yearOfEstablished");
        double marketValue = resultSet.getDouble("marketValue");
        ft = new FootballTeam(name, yearOfEstablished, marketValue);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return ft;
  }

  @Override
  public FootballTeam findByName(String name) {
    FootballTeam ft = null;
    try {
      findByNameStmt.setString(1, name);
      ResultSet resultSet = findByIdStmt.executeQuery();
      if (resultSet.next()) {
        int yearOfEstablished = resultSet.getInt("yearOfEstablished");
        double marketValue = resultSet.getDouble("marketValue");
        ft = new FootballTeam(name, yearOfEstablished, marketValue);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return ft;
  }

  @Override
  public FootballTeam findByYearOfEstablished(int yearOfEstablished) {
    FootballTeam ft = null;
    try {
      findByYearOfEstablishedStmt.setInt(1, yearOfEstablished);
      ResultSet resultSet = findByIdStmt.executeQuery();
      if (resultSet.next()) {
        String name = resultSet.getString("name");
        double marketValue = resultSet.getDouble("marketValue");
        ft = new FootballTeam(name, yearOfEstablished, marketValue);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return ft;
  }

  @Override
  public FootballTeam findByMarketValue(double marketValue) {
    FootballTeam ft = null;
    try {
      findByMarketValueStmt.setDouble(1, marketValue);
      ResultSet resultSet = findByIdStmt.executeQuery();
      if (resultSet.next()) {
        String name = resultSet.getString("name");
        int yearOfEstablished = resultSet.getInt("yearOfEstablished");
        ft = new FootballTeam(name, yearOfEstablished, marketValue);
      }
    } catch (SQLException e) {
      e.printStackTrace();
    }
    return ft;
  }

}
